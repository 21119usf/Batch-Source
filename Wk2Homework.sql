--SECTION 2

--2.1
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE
WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2

SELECT * FROM ALBUM
ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER
ORDER BY CITY ASC;

--2.3

INSERT INTO GENRE VALUES(26, 'THE DARKEST OF DEATH METAL');
INSERT INTO GENRE VALUES(27, 'RAP GOD');

INSERT INTO EMPLOYEE VALUES(9, 'GUEVARA', 'JOAO', 'IT STAFF', 6, '23-FEB-1989', '23-FEB-1989', '11707 STEAMBOAT SPRINGS', 'HOUSTON', 'TX', 'US', '77067', '281-555-9999', '281-555-9999', 'RABBLERABBLE@YEEE.COM');
INSERT INTO EMPLOYEE VALUES(10, 'SLOANS', 'SLOAN', 'IT STAFF', 6, '04-MAR-2000', '23-FEB-2000', '6798 THAT PLACE', 'TAMPA', 'FL', 'US', '90876', '999-999-9999', '281-890-9999', 'BLAHBLAH@YEEE.COM');

INSERT INTO CUSTOMER VALUES(60, 'STEEL', 'JOAO', NULL, '1 DAT STREET', 'HOUSTON', 'TX', 'US', '77067', '281-555-1231', NULL, 'EMAIL@YEEE.COM', 5);
INSERT INTO CUSTOMER VALUES(61, 'MURPHY', 'DARKNESS', NULL, '679 RICK JAMES', 'HOUSTON', 'TX', 'US', '77067', '281-777-7777', NULL, 'UNITY@YAHOO.COM', 3);

--2.4

UPDATE CUSTOMER SET FIRSTNAME = 'ROBERT', LASTNAME = 'WALTER' WHERE CUSTOMERID = 32;

UPDATE ARTIST SET NAME = 'CCR' WHERE ARTISTID = 76;

--2.5

SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6

SELECT * FROM INVOICE 
WHERE TOTAL
BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE
WHERE HIREDATE
BETWEEN '1-JUNE-2003' AND '1-MARCH-2004';

--2.7
DELETE FROM INVOICELINE WHERE INVOICEID = 245;
DELETE FROM INVOICELINE WHERE INVOICEID = 268;
DELETE FROM INVOICELINE WHERE INVOICEID = 290;
DELETE FROM INVOICELINE WHERE INVOICEID = 342;
DELETE FROM INVOICELINE WHERE INVOICEID = 50;
DELETE FROM INVOICELINE WHERE INVOICEID = 61;
DELETE FROM INVOICELINE WHERE INVOICEID = 116;

DELETE FROM INVOICE WHERE CUSTOMERID = 32;

DELETE FROM CUSTOMER WHERE FIRSTNAME = 'ROBERT' AND LASTNAME = 'WALTER';

--3.1

CREATE OR REPLACE FUNCTION C_TIME
RETURN TIMESTAMP
IS
T TIMESTAMP := SYSTIMESTAMP;
BEGIN
    RETURN(T);
END;
/

SELECT C_TIME() FROM DUAL;

--FUNCTION?

SELECT LENGTH (NAME) FROM MEDIATYPE WHERE MEDIATYPEID = 1;

--3.2

CREATE OR REPLACE FUNCTION ALLINVOICES
RETURN NUMBER
AS
TOTALIN NUMBER;
BEGIN
SELECT AVG(TOTAL)INTO TOTALIN FROM INVOICE;
RETURN TOTALIN;
END;
/

SELECT ALLINVOICES() FROM DUAL;

CREATE OR REPLACE FUNCTION EXPTRACK
RETURN NUMBER
AS
EXPENSIVE NUMBER;
BEGIN
SELECT MAX(UNITPRICE)INTO EXPENSIVE FROM TRACK;
RETURN EXPENSIVE;
END;
/

SELECT EXPTRACK() FROM DUAL;

--3.3

CREATE OR REPLACE FUNCTION SCALARF
RETURN NUMBER
AS
EXPENSIVE NUMBER;
BEGIN
SELECT AVG(UNITPRICE)INTO EXPENSIVE FROM INVOICELINE;
RETURN EXPENSIVE;
END;
/

SELECT SCALARF() FROM DUAL;

--3.4

CREATE OR REPLACE FUNCTION BIRTH
    (BIRTHDATE DATE, S OUT SYS_REFCURSOR)
    RETURN DATE
    AS
    BIRTH DATE;
BEGIN
    OPEN S FOR SELECT BIRTHDATE INTO BIRTH FROM EMPLOYEE 
    WHERE BIRTHDATE > '01-JAN-68';
COMMIT;
END;
/


--4.1

CREATE OR REPLACE PROCEDURE ALLNAMES
(GAN OUT SYS_REFCURSOR)
IS
BEGIN
OPEN GAN FOR SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
COMMIT;
END;
/



--4.2

CREATE OR REPLACE PROCEDURE  UPDATELAST
(LASTN IN EMPLOYEE.LASTNAME%TYPE, IDENT IN EMPLOYEEID%TYPE)
IS
BEGIN
UPDATE EMPLOYEE SET LASTNAME = LN WHERE EMPLOYEE = IDENT;
COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE THEMANA
(IDENT EMPLOYEE.EMPLOYEEID%TYPE, MAN OUT SYS_REFCURSOR)
IS
BEGIN
OPEN MAN FOR SELECT * FROM EMPLOYEE WHERE EMPLOYEEID =(
SELECT REPORTSTO FROM EMPLOYEE WHERE EMPLOYEEID = IDENT);
COMMIT;
END;
/

--4.3

CREATE OR REPLACE PROCEDURE NAMECOMP
(NCP OUT SYS_REFCURSOR)
IS
BEGIN
OPEN NCP FOR SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER;
COMMIT;
END;
/

--5.0

CREATE OR REPLACE PROCEDURE DELETEIN
(IDENT INVOICE.INVOICEID%TYPE, DIN OUT SYS_REFCURSOR)
IS
BEGIN
OPEN DIN FOR SELECT * FROM INVOICE WHERE INVOICEID = IDENT;
COMMIT;
END;
/

EXECUTE DELETEIN;

--6.0

CREATE OR REPLACE TRIGGER FIREDEMP
AFTER INSERT ON EMPLOYEE 
BEGIN
NULL;
END;
/

INSERT INTO EMPLOYEE VALUES(11, 'FTEST', 'LTEST', 'TTEST', 6, '12-NOV-12', '12-NOV-12', 'NOWHERE', 'NOWHERE', 'NOWHERE', 'NO', 89089, 9999999, 9999999, 'NOPE@EMAIL');

CREATE OR REPLACE TRIGGER FIREALBUM
AFTER UPDATE ON ALBUM 
BEGIN
NULL;
END;
/
--****


CREATE OR REPLACE TRIGGER DELETEC
AFTER DELETE ON CUSTOMER 
BEGIN
NULL;
END;
/

--7.1

SELECT FIRSTNAME, LASTNAME, INVOICE.INVOICEID FROM CUSTOMER INNER JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

--7.2

SELECT CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL FROM CUSTOMER FULL OUTER JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

--7.3

SELECT ARTIST.NAME, TITLE FROM ARTIST RIGHT OUTER JOIN ALBUM ON ARTIST.ARTISTID = ALBUM.ARTISTID;

--7.4

SELECT * FROM ALBUM CROSS JOIN ARTIST 
ORDER BY ARTIST.NAME ASC;

--7.5

SELECT * FROM EMPLOYEE E1, EMPLOYEE E2 WHERE E1.REPORTSTO = E2.EMPLOYEEID;