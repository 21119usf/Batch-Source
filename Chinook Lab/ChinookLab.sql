-- James Donlevy
-- Chinook Lab

-------------------------------------------------- Section 2.0                            
--2.1 SELECT

SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE
WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE
WHERE FIRSTNAME='Andrew' 
AND REPORTSTO IS NULL;

--2.2 ORDER BY

SELECT * FROM ALBUM
ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER
ORDER BY CITY;

--2.3 INSERT INTO

INSERT INTO GENRE VALUES(26,'Indie Rock');
INSERT INTO GENRE VALUES(27,'Electric House');

INSERT INTO EMPLOYEE VALUES(9,'Donlevy','James','Associate Engineer',6,'05-JUL-95','11-FEB-19','20 Woodstock pl','Lake Grove','NY','Merica','11755','1234567890','who still uses fax?','username@aim.com');
INSERT INTO EMPLOYEE VALUES(10,'Morty','Smith','President',1,'05-JUL-95','01-AUG-45','1 Alamo dr','El Paso','Texas','Merica','22369','0987654321','whats a fax?','shaunPenn@myspace.com');

INSERT INTO CUSTOMER VALUES(60,'Joe','Shmo','Nike','123 Shoe walk','Beaverton','Oregon','USA','96321','1235468888','fax shouldnt exist','joe.shmo@nike.shoe',7);
INSERT INTO CUSTOMER VALUES(61,'Albert','Rho','Nvidia','555 Wafer way','Silicon Valley','California','MERICA','21216','1111111111','just no','gtx@1080.ti',4);

--2.4 UPDATE

UPDATE CUSTOMER
SET FIRSTNAME='Robert',LASTNAME='Walter'
WHERE FIRSTNAME='Aaron' AND LASTNAME='Mitchell';

UPDATE ARTIST
SET NAME='CCR'
WHERE NAME='Creedence Clearwater Revival';

--2.5 like

SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN

SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

-- 2.7 DELETE
--to resolved foreign key constraint I deleted all entries that the customer
--pointed to in other tables (invoice and invoiceline)
DELETE FROM INVOICELINE
WHERE INVOICEID IN 
   (SELECT INVOICEID FROM INVOICE
    WHERE CUSTOMERID IN
        (SELECT CUSTOMERID FROM CUSTOMER
         WHERE FIRSTNAME='Robert' AND LASTNAME='Walter')
    );

DELETE FROM INVOICE
WHERE CUSTOMERID IN 
    (SELECT CUSTOMERID FROM CUSTOMER
    WHERE FIRSTNAME='Robert' AND LASTNAME ='Walter');

DELETE FROM CUSTOMER 
WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';

COMMIT;


--------------------------------------------------------------------- Section 3.0
--3.1 SYSTEM DEFINED FUNCTIONS

CREATE OR REPLACE FUNCTION CUR_TIME
RETURN VARCHAR2
IS TIME_NOW VARCHAR2(50);
BEGIN
SELECT CURRENT_TIMESTAMP INTO TIME_NOW
FROM DUAL;
RETURN(TIME_NOW);
END;
/
SELECT CUR_TIME FROM DUAL;

CREATE OR REPLACE FUNCTION NAME_LENGTH(
    I_MEDIATYPEID IN MEDIATYPE.MEDIATYPEID%TYPE)
RETURN INTEGER
IS 
LENGTH_NAME INTEGER;
NAME VARCHAR2(20);
BEGIN
    SELECT NAME INTO NAME
    FROM MEDIATYPE
    WHERE MEDIATYPEID=I_MEDIATYPEID;
    LENGTH_NAME := LENGTH(NAME);
RETURN(LENGTH_NAME);
END;
/
SELECT NAME_LENGTH(5) FROM DUAL;


--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS

CREATE OR REPLACE FUNCTION AVG_INVOICE
RETURN NUMBER AS AVG_IN NUMBER(10,2);
BEGIN
SELECT AVG(TOTAL) INTO AVG_IN
FROM INVOICE;
RETURN AVG_IN;
END;
/
SELECT AVG_INVOICE FROM DUAL;

CREATE OR REPLACE FUNCTION MOST_EXPENSIVE_TRACK
RETURN NUMBER AS TRACK_NAME NUMBER(10,2);
BEGIN
    SELECT MAX(UNITPRICE) INTO TRACK_NAME
    FROM TRACK;
RETURN TRACK_NAME;
END;
/
SELECT MOST_EXPENSIVE_TRACK FROM DUAL;

--3.3 USER DEFINED SCALAR FUNCTIONS
CREATE OR REPLACE FUNCTION AVG_INVOICELINE_ITEMS
RETURN NUMBER AS AVG_ITEM NUMBER(10,2);
BEGIN
    SELECT AVG(UNITPRICE) INTO AVG_ITEM
    FROM INVOICELINE;
RETURN AVG_ITEM;
END;
/
SELECT AVG_INVOICELINE_ITEMS FROM DUAL;

--3.4 USER DEFINED TABLE VALUED FUNCTIONS
CREATE OR REPLACE FUNCTION BORN_AFTER_86
RETURN SYS_REFCURSOR
IS 
    S SYS_REFCURSOR;
BEGIN
    OPEN S FOR
        SELECT FIRSTNAME, LASTNAME 
        FROM EMPLOYEE
        WHERE BIRTHDATE > TO_DATE('31-DEC-1967');
RETURN S;
END;
/
DECLARE
    S SYS_REFCURSOR;
    FIRSTNAME EMPLOYEE.FIRSTNAME%TYPE;
    LASTNAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    S := BORN_AFTER_86;
    LOOP
        FETCH S INTO FIRSTNAME, LASTNAME;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FIRSTNAME||' '||LASTNAME);
    END LOOP;
    CLOSE S;    
END;

-------------------------------------------------------- Section 4.0
--4.1 BASIC STORED PROCECURE
CREATE OR REPLACE PROCEDURE FIRST_LAST(
    S OUT SYS_REFCURSOR)
IS 
BEGIN
    OPEN S FOR
        SELECT FIRSTNAME,LASTNAME
        FROM EMPLOYEE;
END;
/
DECLARE 
    S SYS_REFCURSOR;
    FIRSTNAME EMPLOYEE.FIRSTNAME%TYPE;
    LASTNAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    FIRST_LAST(S);
    LOOP
        FETCH S INTO FIRSTNAME, LASTNAME;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FIRSTNAME||' '||LASTNAME);
    END LOOP;
    CLOSE S;
END;
/

--4.2 STORED PROCEDURE INPUT PARAMETERS
CREATE OR REPLACE PROCEDURE UPDATE_EMP(
    I_EMPLOYEEID IN EMPLOYEE.EMPLOYEEID%TYPE,
    I_LASTNAME IN EMPLOYEE.LASTNAME%TYPE,
    I_FIRSTNAME IN EMPLOYEE.FIRSTNAME%TYPE,
    I_TITLE IN EMPLOYEE.TITLE%TYPE,
    I_REPORTSTO IN EMPLOYEE.REPORTSTO%TYPE,
    I_BIRTHDATE IN EMPLOYEE.BIRTHDATE%TYPE,
    I_HIREDATE IN EMPLOYEE.HIREDATE%TYPE,
    I_ADDRESS IN EMPLOYEE.ADDRESS%TYPE,
    I_CITY IN EMPLOYEE.CITY%TYPE,
    I_STATE IN EMPLOYEE.STATE%TYPE,
    I_COUNTRY IN EMPLOYEE.COUNTRY%TYPE,
    I_POSTALCODE IN EMPLOYEE.POSTALCODE%TYPE,
    I_PHONE IN EMPLOYEE.PHONE%TYPE,
    I_FAX IN EMPLOYEE.FAX%TYPE,
    I_EMAIL IN EMPLOYEE.EMAIL%TYPE)
AS BEGIN
    UPDATE EMPLOYEE SET LASTNAME=I_LASTNAME,
                        FIRSTNAME=I_FIRSTNAME,
                        TITLE=I_TITLE,
                        REPORTSTO=I_REPORTSTO,
                        BIRTHDATE=I_BIRTHDATE,
                        HIREDATE=I_HIREDATE,
                        ADDRESS=I_ADDRESS,
                        CITY=I_CITY,
                        STATE=I_STATE,
                        COUNTRY=I_COUNTRY,
                        POSTALCODE=I_POSTALCODE,
                        PHONE=I_PHONE,
                        FAX=I_FAX,
                        EMAIL=I_EMAIL
    WHERE EMPLOYEEID=I_EMPLOYEEID;
END;
/
--EXECUTE UPDATE_EMP(9,'Bunny','Bugs','Looney Tune',3,'27-APR-38','27-APR-38','123 Porky way','nowhere','none','USA','06268','55555555555','5555555555','bbunny@warnerbros');

CREATE OR REPLACE PROCEDURE WHO_IS_MY_BOSS(
    I_EMPLOYEEID EMPLOYEE.EMPLOYEEID%TYPE,
    O_BOSS OUT EMPLOYEE.EMPLOYEEID%TYPE)
AS 
BEGIN
    SELECT REPORTSTO INTO O_BOSS
    FROM EMPLOYEE
    WHERE EMPLOYEEID=I_EMPLOYEEID;
END;
/
DECLARE
    BOSSFIRST EMPLOYEE.LASTNAME%TYPE;
    BOSSLAST EMPLOYEE.FIRSTNAME%TYPE;
    BOSSID EMPLOYEE.EMPLOYEEID%TYPE;
BEGIN
    WHO_IS_MY_BOSS(6,BOSSID);
    SELECT FIRSTNAME, LASTNAME 
    INTO BOSSFIRST, BOSSLAST
    FROM EMPLOYEE
    WHERE EMPLOYEEID=BOSSID;
    DBMS_OUTPUT.put_line(BOSSFIRST||' '||BOSSLAST);
END;
/



--4.3 STORED PROCEDURE OUTPUT PARAMETERS
CREATE OR REPLACE PROCEDURE NAME_COMP_O_CUST(
    I_CUSTOMERID IN CUSTOMER.CUSTOMERID%TYPE,
    O_FIRSTNAME OUT CUSTOMER.FIRSTNAME%TYPE,
    O_LASTNAME OUT CUSTOMER.LASTNAME%TYPE,
    O_COMPANY OUT CUSTOMER.COMPANY%TYPE)
AS 
     
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY 
    INTO O_FIRSTNAME, O_LASTNAME, O_COMPANY
    FROM CUSTOMER
    WHERE CUSTOMERID=I_CUSTOMERID;
END;
/
SET SERVEROUTPUT ON;
DECLARE
    firstName CUSTOMER.FIRSTNAME%TYPE;
    lastName CUSTOMER.LASTNAME%TYPE;
    company CUSTOMER.COMPANY%TYPE;
BEGIN
    NAME_COMP_O_CUST(5,firstName,lastName,company);
    DBMS_OUTPUT.PUT_LINE(firstName || ' ' || lastName || ' works for: ' || company);
END;
/

-------------------------------------------------------- Section 5.0
--5.0 Transactions

CREATE OR REPLACE PROCEDURE DELETE_INVOICE(
    I_INVOICEID IN INVOICE.INVOICEID%TYPE)
IS BEGIN
    DELETE FROM INVOICELINE
    WHERE I_INVOICEID IN INVOICEID;
    DELETE FROM INVOICE
    WHERE INVOICEID=I_INVOICEID;
END;
/
--EXECUTE DELETE_INVOICE(1);
CREATE SEQUENCE CUSTOMERID_SEQ
MINVALUE 1
MAXVALUE 10000
START WITH 62
INCREMENT BY 1
CACHE 20;

CREATE OR REPLACE PROCEDURE ADD_NEW_CUSTOMER(
    I_FIRSTNAME IN CUSTOMER.FIRSTNAME%TYPE,
    I_LASTNAME IN CUSTOMER.LASTNAME%TYPE,
    I_COMPANY IN CUSTOMER.COMPANY%TYPE,
    I_ADDRESS IN CUSTOMER.ADDRESS%TYPE,
    I_CITY IN CUSTOMER.CITY%TYPE,
    I_STATE IN VARCHAR2,
    I_COUNTRY IN CUSTOMER.COUNTRY%TYPE,
    I_POSTALCODE IN CUSTOMER.POSTALCODE%TYPE,
    I_PHONE IN CUSTOMER.PHONE%TYPE,
    I_FAX IN CUSTOMER.FAX%TYPE,
    I_EMAIL IN CUSTOMER.EMAIL%TYPE,
    I_SUPPORTREPID IN CUSTOMER.SUPPORTREPID%TYPE)
IS BEGIN
    INSERT INTO CUSTOMER VALUES(CUSTOMERID_SEQ.NEXTVAL,
                                I_FIRSTNAME,
                                I_LASTNAME,
                                I_COMPANY,
                                I_ADDRESS,
                                I_CITY,
                                I_STATE,
                                I_COUNTRY,
                                I_POSTALCODE,
                                I_PHONE,
                                I_FAX,
                                I_EMAIL,
                                I_SUPPORTREPID);
    COMMIT;
END;
/
--EXECUTE ADD_NEW_CUSTOMER('Hank','Hill','Strickland Propane','123 Arlen rd','Arlen','Texas','USA','11336','5555555555','5555555555','hhil@king.hill','3');



-------------------------------------------------------- Section 6.0
--6.1
CREATE TRIGGER AFTER_INSERT
AFTER INSERT ON EMPLOYEE
BEGIN
    DBMS_OUTPUT.PUT_LINE('AFTER INSERT TRIGGER FIRED ON EMPLOYEE TABLE');
END;
/
--6.2
CREATE TRIGGER AFTER_UPDATE
AFTER UPDATE ON ALBUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('AFTER UPDATE TRIGGER FIRED ON ALBUM TABLE');
END;
/
--6.3
CREATE TRIGGER AFTER_DELETE
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('AFTER DELETE TRIGGER FIRED ON CUSTOMER TABLE');
END;
/

-------------------------------------------------------- Section 7.0
--7.1 INNER
SELECT C.FIRSTNAME, C.LASTNAME, I.INVOICEID
FROM CUSTOMER C
INNER JOIN INVOICE I 
ON C.CUSTOMERID=I.CUSTOMERID;

--7.2 OUTER
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL
FROM CUSTOMER C
FULL OUTER JOIN INVOICE I
ON C.CUSTOMERID=I.CUSTOMERID;

--7.3 RIGHT
SELECT R.NAME, L.TITLE
FROM ALBUM L
RIGHT JOIN ARTIST R
ON L.ARTISTID=R.ARTISTID;

--7.4 CROSS
SELECT *
FROM ARTIST
CROSS JOIN ALBUM
ORDER BY ARTIST.NAME;

--7.5 SELF
SELECT *
FROM EMPLOYEE A, EMPLOYEE B;
