--PL/SQL
/*
CREATE OR REPLACE SEQUENCE [Seq name]
MINVALUE [value]
MAXVALUE [value]
START WITH [value]
INCREMENT BY [value]
CACHE [value];
*/

CREATE SEQUENCE MYTESTSEQ
MINVALUE 100
MAXVALUE 10000
START WITH 5000
INCREMENT BY -5
CACHE 20;

SELECT MYTESTSEQ.NEXTVAL FROM DUAL;
INSERT INTO STUDENT VALUES (MYTESTSEQ.NEXTVAL, 'JIM',3);
/*DUAL IS A DUMMY TABLE USED TO COMPLETE SELECT STATEMENTS*/

--VIEW
--VIRTUAL TABLE
--A SAVED SELECT STATEMENT
CREATE OR REPLACE VIEW MYVIEW
AS SELECT TITLE AS A_LIST_OF_STUFF FROM ALBUM
UNION
SELECT NAME FROM ARTIST;
--UNION COMBINES SETS NOT TABLES

SELECT * FROM MYVIEW
WHERE A_LIST_OF_STUFF LIKE 'T%R%'; --LIKE OR STARTS WITH T

--INDEX
/*
CREATE INDEX [name]
ON [Table Name] ([column name] ) ASC/DESC
*/
CREATE INDEX MYINDEX
ON ALBUM (ARTISTID);

--TRIGGERS

/*
CREATE TRIGGER [name]
BEFORE INSERT ON [table name]
FOR EACH ROW
BEGIN
SELECT MySeq.NEXTVAL INTO:NEW.C_ID FROM DUAL;
END;
*/

CREATE OR REPLACE TRIGGER MYTRIG
BEFORE INSERT ON STUDENT
FOR EACH ROW
BEGIN
SELECT MYTESTSEQ.NEXTVAL INTO:NEW.S_ID FROM DUAL;
END;

INSERT INTO STUDENT VALUES (33,'Ivan',1);

/*
FUNCTIONS - BLOCK OF CODE THAT WE CAN EXECUTE
MUST RETURN ONE AND ONLY ONE VALUE
CAN HAV 0+ MANY PARAMETERS
FUNCTIONS CAN CALL OTHER FUNCTIONS
CANNOT CALL STORED PROCEDURES
NO TRANSACTIONS OR DML

*/
CREATE OR REPLACE FUNCTION CALC_TAX
(T_ID IN NUMBER, TAX IN NUMBER)
RETURN NUMBER AS
TOTAL_PRICE NUMBER(10,2);
BEGIN
SELECT UNITPRICE INTO TOTAL_PRICE
FROM TRACK
WHERE TRACKID = T_ID;
RETURN TOTAL_PRICE + (TOTAL_PRICE*TAX);
END;
/
--using CALC_TAX
SELECT CALC_TAX(2921,.07) FROM DUAL;

CREATE OR REPLACE FUNCTION METALSUCKS
(GENREID2 IN NUMBER)
RETURN VARCHAR2 AS
PHRASE VARCHAR2 (100);
BEGIN
SELECT NAME INTO PHRASE
FROM GENRE
WHERE GENREID = GENREID2;
RETURN PHRASE || ' SUCKS';
END;

SELECT METALSUCKS(13) FROM DUAL;

--Stored procedures
/*
DOES NOT RETURN A VALUE
SUPPORTS MULTIPLE IN, OUT, AND IN/OUT PARAMETERS
CAN CALL ANOTHER STORED PROCEDURE
CAN DO TRANSACTIONS AND DML
CANNOT DO DDL

CREATE PROCEDURE [name]
[parameters] AS 
[variable declarations]
BEGIN
--LOGIC
COMMIT;
END;
*/

CREATE OR REPLACE PROCEDURE MYSTOPRO
(NAME IN VARCHAR2)
AS
BEGIN 
INSERT INTO SCHOOL VALUES (MYTESTSEQ.NEXTVAL, NAME);
COMMIT;
END;
--Delimiter officially says not this is the end of the parameter
/
EXECUTE MYSTOPRO ('MIT');

CREATE SEQUENCE ADDARTISTSEQ
MINVALUE 1
MAXVALUE 10000
START WITH 276
INCREMENT BY 1
CACHE 20;

CREATE OR REPLACE PROCEDURE ADDARTISTALBUM
(ARTISTNAME IN VARCHAR2, ALBUMNAME IN VARCHAR2)
AS
BEGIN

INSERT INTO ARTIST VALUES (ADDARTISTSEQ.NEXTVAL,ARTISTNAME);
INSERT INTO ALBUM VALUES(ADDALBUMSEQ.NEXTVAL,ALBUMNAME,ADDARTISTSEQ.CURRVAL);
COMMIT;
END;
/
EXECUTE ADDARTIST ('The Killers');

CREATE SEQUENCE ADDALBUMSEQ
MINVALUE 1
MAXVALUE 10000
START WITH 348
INCREMENT BY 1
CACHE 20;

CREATE OR REPLACE PROCEDURE ADDARTISTALBUM
(ARTISTNAME IN VARCHAR2, ALBUMNAME IN VARCHAR2)
AS
BEGIN

INSERT INTO ARTIST VALUES (ADDARTISTSEQ.NEXTVAL,ARTISTNAME);
INSERT INTO ALBUM VALUES(ADDALBUMSEQ.NEXTVAL,ALBUMNAME,ADDARTISTSEQ.CURRVAL);
COMMIT;
END;
/
EXECUTE ADDARTISTALBUM ('The Postal Service', 'Give Up');

--cursors
/*
VIEW STORED IN A LOCAL VARIABLE
IT MUST BE OPENED
IT CAN BE LOOPED THROUGH
MUST BE CLOSED
IMPLICIT CURSORS- RESULT SET FROM A SELECT STATEMENT
    SYSTEM REFERENCE CURSORS
    CAN MAKE OUR OWN- EXPLICIT CURSORS
    

*/
/
CREATE OR REPLACE PROCEDURE GET_ALL_ALBUMS
(S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR
SELECT ALBUMID, TITLE FROM ALBUM;
END;
/
DECLARE 
S SYS_REFCURSOR;
ALBUM_ID ALBUM.ALBUMID%TYPE; --SETS ALBUM_ID TO WHATEVER DATATYPEALBUMID IS
ALBUM_NAME ALBUM.TITLE%TYPE;
BEGIN
GET_ALL_ALBUMS(S);
LOOP
FETCH S INTO ALBUM_ID,ALBUM_NAME;
EXIT WHEN S%NOTFOUND; /*BREAK OUT OF LOOP WHEN NO MORE ROWS ARE AVAILABLE*/

DBMS_OUTPUT.PUT_LINE(ALBUM_ID||' is the album ID, '||ALBUM_NAME||' is the album Name');
END LOOP;
CLOSE S;
END;
/

SET SERVEROUTPUT ON;









