--Assignment 2
--SQL Lab
--2.0 SQL Queries
--2.1 Select
SELECT * from Employee;

SELECT * from Employee
WHERE LASTNAME='King';

SELECT * from Employee
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS null;

--2.2 Order by
SELECT * FROM ALBUM
ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER
ORDER BY CITY;

--2.3
INSERT INTO GENRE (GENREID, NAME) VALUES (26, 'Horror');
INSERT INTO GENRE (GENREID, NAME) VALUES (27,'Lofi Hip-Hop/Jazz');

INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO,
    BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES (9, 'Aniston', 'Jennifer', 'Sales Support Agent', 2, '11-FEB-69', '04-JUN-05', '3434 Janet Way',
    'Lethbridge', 'AB', 'Canada', 'T1K 5N8', '1 (780)212-0967', '+1 (403) 456-8485','jen@chinookcorp.com');

INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO,
    BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES (10, 'Henry', 'Derrick', 'IT Staff', 2, '11-DEC-96', '14-AUG-02', '786 Bears rd',
    'Calgary', 'AB', 'Canada', 'T2P 5O9', '1 (780)876-9877', '+1 (403) 476-9493','king@chinookcorp.com');
    
    
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE,
    PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES (60, 'Ricky', 'Bobby',null, '7878 Jones ave', 'Tampa',null, 'USA', '32343', '(342)-787-3648','(342)-787-3648',
    'press@myline.com', 3);

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE,
    PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES (61, 'Scotty', 'Travis',null, '222 Desire Lane', 'Orlando',null, 'USA', '34423', '(654)-324-8745','(232)-734-0909',
    'vro@wantfriends.com', 4);
  
--2.4 Update
UPDATE CUSTOMER SET FIRSTNAME='Robert' ,LASTNAME='Walter' 
WHERE FIRSTNAME='Aaron';

UPDATE ARTIST SET NAME='CCR' 
WHERE NAME='Creedence Clearwater Revival';

--2.5 Like
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 Between
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

--2.7 DELETE

ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;--HAVE TO DROP CONSTRAINT FROM INVOICE TABLE BEFORE DELETING ROW FROM CUSTOMER TABLE

DELETE FROM CUSTOMER WHERE LASTNAME='Walter' AND FIRSTNAME='Robert';

ALTER TABLE Invoice ADD CONSTRAINT FK_InvoiceCustomerId
    FOREIGN KEY (CustomerId) REFERENCES Customer (CustomerId)  ;

select * from invoice;    
    


--3 SQL Functions
--3.1

CREATE OR REPLACE FUNCTION GETTIMENOW
RETURN TIMESTAMP IS
  TIMEIN TIMESTAMP;
BEGIN
    TIMEIN :=  CURRENT_TIMESTAMP;
  RETURN TIMEIN;
END;
/


     
SELECT GETTIMENOW() FROM DUAL;

--create a function that returns the length of name in MEDIATYPE table
CREATE OR REPLACE FUNCTION GETLENGTH
(M_ID IN NUMBER)
RETURN NUMBER IS
STRING_LENGTH NUMBER (10,2);
BEGIN
SELECT LENGTH(NAME) INTO STRING_LENGTH
FROM mediatype
WHERE MEDIATYPEID=M_ID;
RETURN STRING_LENGTH;
END;
/

SELECT GETLENGTH(2) FROM DUAL;


--3.2 Aggregate Functions
CREATE OR REPLACE FUNCTION AVERAGETOTINVOICES
RETURN NUMBER 
AS 
TOTAVG NUMBER(10,2);
BEGIN
    SELECT AVG(TOTAL) INTO TOTAVG
    FROM INVOICE;
    RETURN TOTAVG;
END;
/

SELECT * FROM TRACK;

SELECT AVERAGETOTINVOICES FROM DUAL;

CREATE OR REPLACE FUNCTION MOSTEXPENSIVETRACK
RETURN NUMBER
AS
MOSTEXPENSIVE NUMBER(10, 2);
BEGIN
    SELECT MAX(UNITPRICE) INTO MOSTEXPENSIVE
    FROM TRACK;
    RETURN MOSTEXPENSIVE;
END;
/

SELECT MOSTEXPENSIVETRACK FROM DUAL;

--3.3 SCALAR FUNCTIONS
--Create a function that returns the average price of invoiceline items in the invoiceline table
CREATE OR REPLACE FUNCTION AVERAGEPRICEINVOICELINE
RETURN NUMBER 
IS
PRICEAVG NUMBER;
BEGIN
    SELECT AVG(UNITPRICE)
    INTO PRICEAVG
    FROM INVOICELINE;
RETURN PRICEAVG;
END;
/

SELECT AVERAGEPRICEINVOICELINE FROM DUAL;

--3.4 User Defined Table Valued Functions
--Create a function that returns all employees who are born after 1968.
CREATE OR REPLACE FUNCTION BIRTHAFTER68
RETURN SYS_REFCURSOR 
IS 
EMP SYS_REFCURSOR;
    BEGIN 
        OPEN EMP FOR 
        SELECT FIRSTNAME, LASTNAME 
        FROM EMPLOYEE
        WHERE BIRTHDATE >'01-JAN-1968';
    RETURN EMP;
END;
/

SELECT BIRTHAFTER68 FROM DUAL;

--4.0 Stored Procedures
--In this section you will be creating and executing stored procedures. You will be creating various types of stored procedures that take input and output parameters.
--4.1 Basic Stored Procedure
--Create a stored procedure that selects the first and last names of all the employees.
CREATE OR REPLACE PROCEDURE GETNAMES
(S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/

DECLARE
S SYS_REFCURSOR;
FIRSTNAME EMPLOYEE.FIRSTNAME%TYPE;--SET ALBUMID TO WHATEVER DATATYPE ALBUMID IS
LASTNAME EMPLOYEE.LASTNAME%TYPE;
BEGIN 
GETNAMES(S);
LOOP
FETCH S INTO FIRSTNAME, LASTNAME;
EXIT WHEN S%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(FIRSTNAME||' IS FIRST NAME, '||LASTNAME||' IS LAST NAME');
END LOOP;
CLOSE S;
END;
/
SET SERVEROUTPUT ON;

--4.2 Stored Procedure Input Parameters
--Create a stored procedure that updates the personal information of an employee.
CREATE OR REPLACE PROCEDURE UPDATEPERONALINFO(EMPLOYEEID IN EMPLOYEE.EMPLOYEEID%TYPE, LASTNAME IN EMPLOYEE.LASTNAME%TYPE, 
                                        FIRSTNAME IN EMPLOYEE.FIRSTNAME%TYPE, TITLE IN EMPLOYEE.TITLE%TYPE, ADDRESS IN EMPLOYEE.ADDRESS%TYPE, 
                                        CITY IN EMPLOYEE.CITY%TYPE, POSTALCODE IN EMPLOYEE.POSTALCODE%TYPE, PHONE IN EMPLOYEE.PHONE%TYPE, 
                                        EMAIL IN EMPLOYEE.EMAIL%TYPE)
IS
BEGIN
    UPDATE EMPLOYEE SET LASTNAME = LASTNAME WHERE EMPLOYEEID = EMPLOYEEID;
    UPDATE EMPLOYEE SET FIRSTNAME = FIRSTNAME WHERE EMPLOYEEID = EMPLOYEEID;
    UPDATE EMPLOYEE SET TITLE = TITLE WHERE EMPLOYEEID = EMPLOYEEID;
    UPDATE EMPLOYEE SET ADDRESS = ADDRESS WHERE EMPLOYEEID = EMPLOYEEID;
    UPDATE EMPLOYEE SET CITY = CITY WHERE EMPLOYEEID = EMPLOYEEID;
    UPDATE EMPLOYEE SET POSTALCODE = POSTALCODE WHERE EMPLOYEEID = EMPLOYEEID;
    UPDATE EMPLOYEE SET PHONE = PHONE WHERE EMPLOYEEID = EMPLOYEEID;
    UPDATE EMPLOYEE SET EMAIL = EMAIL WHERE EMPLOYEEID = EMPLOYEEID;
COMMIT;
END;
/
EXECUTE UPDATEPERONALINFO(7, 'Ricky', 'Bobby', 'Senior V/P', '7655 Spring Glenn Ave', 'Bricks', 'T3K 5N9', '+1(904)676-0099', 'rogerrabbit@spring.org');


--Create a stored procedure that returns the managers of an employee .

CREATE OR REPLACE PROCEDURE GETEMPLOYEEMANAGER(EMPID IN EMPLOYEE.EMPLOYEEID%TYPE, GETMANAGERS OUT EMPLOYEE.REPORTSTO%TYPE)
IS
BEGIN
    SELECT REPORTSTO
    INTO GETMANAGERS
    FROM EMPLOYEE
    WHERE EMPLOYEEID = EMPID; 
END; 
/

DECLARE
    GETMANAGERS EMPLOYEE.REPORTSTO%TYPE; 
    EMPID EMPLOYEE.EMPLOYEEID%TYPE; 
BEGIN 
    GETEMPLOYEEMANAGER(6, GETMANAGERS); 
    DBMS_OUTPUT.PUT_LINE('THE MANAGER ID NUMBER IS: ' || GETMANAGERS); 
END; 
/ 
--Create a stored procedure that returns the name and company of a customer.
CREATE OR REPLACE PROCEDURE CUSTOMERINFO(CUSID IN CUSTOMER.CUSTOMERID%TYPE)
IS 
    CMPY CUSTOMER.COMPANY%TYPE; 
    FNAME CUSTOMER.FIRSTNAME%TYPE;
    lNAME CUSTOMER.LASTNAME%TYPE;
BEGIN
    SELECT COMPANY, FIRSTNAME, LASTNAME
    INTO CMPY, FNAME, lNAME
    FROM CUSTOMER WHERE CUSTOMERID = CUSID; 
    DBMS_OUTPUT.PUT_LINE(FNAME|| ' ' ||LNAME|| ' - ' ||CMPY);
END; 
/ 
DECLARE
BEGIN 
    CUSTOMERINFO(2);
END; 
/
--Create a transaction that given aN invoiceId will delete that invoice (There may be constraints that rely on this, find out how to resolve them).
CREATE OR REPLACE PROCEDURE DELETEINVOICE
(INVOICEID IN NUMBER)
AS
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE
    DROP CONSTRAINT FK_INVOICELINEINVOICEID';
    
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE
    ADD CONSTRAINT FK_INVOICELINEINVOICEID
    FOREIGN KEY (INVOICEID)
    REFERENCES INVOICE (INVOICEID)
    ON DELETE CASCADE';
    
    DELETE FROM INVOICE
    WHERE INVOICEID = INVOICEID;

COMMIT;
END;
/
EXECUTE DELETEINVOICE(214);

--Create a transaction nested within a stored procedure that inserts a new record in the Customer table
CREATE SEQUENCE CUSTIDSEQ
MINVALUE 62
MAXVALUE 5000
START WITH 62
INCREMENT BY 1
CACHE 20;

CREATE OR REPLACE PROCEDURE NEWCUSTOMER(FIRSTNAME IN VARCHAR2, LASTNAME IN VARCHAR2, COMPANY IN VARCHAR2,ADDR IN VARCHAR2,
                            CITY IN VARCHAR2, INSERTSTATE IN VARCHAR2,COUNTRY IN VARCHAR2,ZIP IN NUMBER,PHONE IN VARCHAR2,
                            FAX IN VARCHAR2,EMAIL IN VARCHAR2,SUPPORTREP IN NUMBER)
AS
BEGIN
INSERT INTO CUSTOMER VALUES (CUSTIDSEQ.NEXTVAL, FIRSTNAME, LASTNAME, COMPANY, ADDR, CITY,
                        INSERTSTATE, COUNTRY, ZIP, PHONE, FAX, EMAIL, SUPPORTREP);
COMMIT;
END;
/

EXECUTE NEWCUSTOMER('Jimmy', 'Johns', 'Subs', '4343 Sub lane', 'Walden', 'MB', 'Space', 32454, '+1(454)245-9086', '+1(454)245-9086', 'wallypip@yahoo.com', 4);

--6.0 Triggers
--6.1 AFTER/FOR
--Create an after insert trigger on the employee table fired after a new record is inserted into the table.
CREATE OR REPLACE TRIGGER AFTERINSERTTRIGGER
AFTER 
    INSERT ON EMPLOYEE FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('After insert trigger executed.');
END;
/
SET SERVEROUTPUT ON

INSERT INTO EMPLOYEE VALUES(21, 'Fournette', 'Lenny', 'IT Janitor', 3, '07-JUN-85', '10-MAY-07', '6587 Hate Rd', 'Montreal', 'AB', 'Canada', 'T5N 3P2', '+1(904)876-2930', 
'+1(619)936-0973', 'breakingmyhear@yahoo.com');

--Create an after update trigger on the album table that fires after a row is inserted in the table.
CREATE OR REPLACE TRIGGER AFTERUPDATETRIGGER
    AFTER UPDATE ON ALBUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('After Update trigger executed.');
END;
/
--Create an after delete trigger on the customer table that fires after a row is deleted from the table.
CREATE OR REPLACE TRIGGER AFTERDELETETRIGGER 
    AFTER DELETE ON CUSTOMER FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('After delete trigger executed.'); 
END; 
/ 
--7.0 JOINS
--7.1 INNER
--Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
SELECT C.FIRSTNAME||C.LASTNAME AS NAME, I.INVOICEID
    FROM CUSTOMER C
INNER JOIN INVOICE I ON C.CUSTOMERID = I.INVOICEID;

--7.2 OUTER
--Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.

SELECT  C.CUSTOMERID AS ID, C.FIRSTNAME || C.LASTNAME AS NAME, I.INVOICEID AS INVOICE, I.TOTAL AS TOTAL
    FROM CUSTOMER C
LEFT OUTER JOIN INVOICE I ON C.CUSTOMERID = I.CUSTOMERID;

--7.3 RIGHT
--Create a right join that joins album and artist specifying artist name and title.
SELECT A.TITLE, R.NAME
    FROM ARTIST R
RIGHT OUTER JOIN ALBUM A ON A.ARTISTID = R.ARTISTID;

--7.4 CROSS
--Create a cross join that joins album and artist and sorts by artist name in ascending order.
SELECT * FROM ALBUM
    CROSS JOIN ARTIST R ORDER BY R.NAME;
--7.5 SELF
--Perform a self-join on the employee table, joining on the reportsto column.
SELECT A.EMPLOYEEID, A.LASTNAME || A.FIRSTNAME 
AS NAME, 
    B.REPORTSTO
    FROM EMPLOYEE A, EMPLOYEE B
    WHERE A.EMPLOYEEID = B.REPORTSTO; 

