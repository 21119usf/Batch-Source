-- THIS IS WHERE I DEFINE MY TABLES
DROP TABLE LOGIN_TABLE;
DROP TABLE USERS_TABLE;
DROP TABLE BANK_TABLE;

-- THIS TABLE WILL BE USE SOLELY FOR LOGIN PURPOSES, SUCH AS VERIFYING IF A PERSON CAN LOG IN
CREATE TABLE LOGIN_TABLE
(
    USERNAME        VARCHAR2(30) NOT NULL,
    PASS            VARCHAR2(30) NOT NULL,          --CHANGEABLE. NO CONSEQUENCE.
    USER_ID         NUMBER(4) UNIQUE NOT NULL ,
    CONSTRAINT LOGIN_TABLE_PK PRIMARY KEY (USERNAME)
)

-- THIS TABLE WILL HOLD PERSONAL INFO FOR EACH USER, 1 ROW IN USER = 1 ROW IN MOCKTABLE
CREATE TABLE USERS_TABLE
(
    USER_ID         NUMBER(4) NOT NULL,
    FIRST_NAME      VARCHAR2(30) NOT NULL,          --CHANGEABLE. NO CONSEQUENCE.
    LAST_NAME       VARCHAR2(30) NOT NULL,          --CHANGEABLE. NO CONSEQUENCE.
    STREET_ADDRESS  VARCHAR2(50) NOT NULL,          --CHANGEABLE. NO CONSEQUENCE.
    EMAIL           VARCHAR2(30) NOT NULL,          --CHANGEABLE. NO CONSEQUENCE.
    PHONE_NUM       VARCHAR2(30) NOT NULL,          --CHANGEABLE. NO CONSEQUENCE.
    APPROVED        NUMBER(1),                      --CHANGEABLE (ONLY ADMIN). 0 = NOT APPROVED YET, 1 = HAS BEEN APPROVED
    IS_ADMIN        NUMBER(1),                      --0 = NOT AN ADMIN, 1 = IS AN ADMIN
    CONSTRAINT USERS_TABLE_PK PRIMARY KEY (USER_ID)
)

-- THIS TABLE WILL HOLD INFORMATION REGARDING A BANK ACCOUNT, A USER CAN BE REFERENCED MULTIPLE TIMES IN THIS TABLE
-- A USER CAN HAVE MANY ACCOUNTS
CREATE TABLE BANK_TABLE
(
    BANK_ACCOUNT_ID NUMBER(4) NOT NULL,
    USER_ID         NUMBER(4) NOT NULL,
    BALANCE         NUMBER(7,2),                    -- CHANGEABLE. SUPPORTED RANGE IS 0.00 TO 99999.00 
    ACCOUNT_TYPE    VARCHAR(10),                    -- WILL EITHER BE 'SAVINGS' OR 'CHECKING'
    CONSTRAINT BANK_TABLE_PK PRIMARY KEY (BANK_ACCOUNT_ID)
)

/*SCENARIOS
    - CREATE A NEW USER: I WILL INSERT A NEW ENTRY INTO LOGINTABLE AND USERTABLE, NOT BANKTABLE.
    - CREATE BANK ACCOUNT: ONLY CUSTOMERS. MUST BE APPROVED. CAN HAVE MULTIPLE. WHEN CREATED, A NEW ROW MUST BE INSERTED INTO
                            BANKTABLE WITH ITS 'USER_ID' SET TO REFERENCE THE 'USER_ID' IN USERTABLE.
    - DELETE BANK ACCOUNT: BALANCE MUST BE EMPTY.
    - DELETE LOGIN/USER ACCOUNT: BALANCE MUST BE EMPTY. DELETE BANKTABLE ENTRIES FIRST. THEN LOGITABLE. FINALLY USERTABLE.
*/
--==============================================================================================================================
-- THESE ARE MY SEQUENCES
DROP SEQUENCE USER_ID_SEQ;
DROP SEQUENCE ADMIN_ID_SEQ;
DROP SEQUENCE BANK_ACCOUNT_ID_SEQ;

-- SEQUENCE FOR MY USER_ID
CREATE SEQUENCE USER_ID_SEQ
MINVALUE 100
MAXVALUE 9999
START WITH 9999
INCREMENT BY -1
CACHE 20;

-- SEQUENCE FOR MY ADMINS
CREATE SEQUENCE ADMIN_ID_SEQ
MINVALUE 1
MAXVALUE 99
START WITH 1
INCREMENT BY 1
CACHE 10;

-- SEQUENCE FOR MY BANK ACCOUNTS
CREATE SEQUENCE BANK_ACCOUNT_ID_SEQ
MINVALUE 1
MAXVALUE 9999
START WITH 1
INCREMENT BY 1
CACHE 20;



--==============================================================================================================================
--THESE OUR MY PROCEDURES
-- FIND AN ENTRY FROM MOCKTABLE GIVEN A 'USERNAME' AND 'PASSWORD'


-- FIND AN ENTRY FROM MOCKUSERS GIVEN A 'USER_ID'
-- FIND ALL ENTRIES FROM MOCKBANK GIVEN A 'USER_ID'
CREATE OR REPLACE PROCEDURE GET_ALL_BANK_ACCOUNTS
(U_ID IN  BANK_TABLE.USER_ID%TYPE, BANK_RECORDS OUT SYS_REFCURSOR)
AS 
BEGIN 
  OPEN BANK_RECORDS FOR
    SELECT BANK_ACCOUNT_ID, BALANCE, ACCOUNT_TYPE
    FROM   BANK_TABLE
    WHERE  USER_ID = U_ID;
END;
/
-- UPDATE A FIELD




--==============================================================================================================================
--MY TRIGGERS
DROP TRIGGER BANK_ID_INSERT;
DROP TRIGGER USER_ID_INSERT;
DROP TRIGGER ADMIN_ID_INSERT;

--SETS THE BANK_ID TO THE NUMBER IN THE BANK_ACCOUNT_ID_SEQ
CREATE OR REPLACE TRIGGER BANK_ID_INSERT
BEFORE INSERT ON BANK_TABLE
FOR EACH ROW
BEGIN
SELECT BANK_ACCOUNT_ID_SEQ.NEXTVAL INTO:NEW.BANK_ACCOUNT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER USER_ID_INSERT
BEFORE INSERT ON LOGIN_TABLE
FOR EACH ROW
WHEN (NEW.IS_ADMIN = 0)
BEGIN
SELECT USER_ID_SEQ.NEXTVAL INTO:NEW.USER_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER ADMIN_ID_INSERT
BEFORE INSERT ON LOGIN_TABLE
FOR EACH ROW
WHEN (NEW.IS_ADMIN = 1)
BEGIN
SELECT ADMIN_ID_SEQ.NEXTVAL INTO:NEW.USER_ID FROM DUAL;
END;
/


--==============================================================================================================================
--PRACTICE
INSERT INTO BANK_TABLE VALUES(30,22,39.00,'SAVINGS');
DELETE FROM BANK_TABLE
WHERE USER_ID = 19;

INSERT INTO USERS_TABLE VALUES(30,'SOCORRO','VENEGAS','SERENITY','MARKA','9999',0,0);

TRUNCATE TABLE USERS_TABLE;
