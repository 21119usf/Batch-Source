--2.1 SELECT
SELECT*FROM EMPLOYEE;

--2.1 WHERE
SELECT*FROM EMPLOYEE        
WHERE LASTNAME = 'King';

--2.1 AND
SELECT*FROM EMPLOYEE        
WHERE FIRSTNAME = 'Andrew' 
AND reportsto IS NULL; 

--2.2 ORDER BY DESC
SELECT*FROM ALBUM           
ORDER BY TITLE DESC;

--2.2 ORDER BY ASC
SELECT FIRSTNAME FROM CUSTOMER  
ORDER BY CITY ASC;

--2.3 INSERT INTO
INSERT INTO GENRE (GENREID, NAME) 
VALUES(26,'PUNK ROCK');
INSERT INTO GENRE (GENREID, NAME)
VALUES(27,'NEW SCHOOL');

--2.3 INSERT INTO
INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME) 
VALUES(9,'ARTIST', 'CON');
INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME) 
VALUES(10,'TOOMANY','FIELDS');

--2.3 INSERT INTOS
INSERT INTO CUSTOMER (CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL)
VALUES(60,'ARTIST', 'CON', 'C@YAHOO.COM');
INSERT INTO CUSTOMER (CUSTOMERID, LASTNAME, FIRSTNAME,EMAIL)
VALUES(61,'TOOMANY','FIELDS', 'T@YAHOO.COM');

--2.4 UPDATE CUSTOMER TABLE
UPDATE CUSTOMER
SET LASTNAME = 'WALTER', FIRSTNAME = 'ROBERT'
WHERE CUSTOMERID=32;

--2.4 UPDATE CUSTOMER TABLE
UPDATE ARTIST 
SET NAME = 'CCR'
WHERE ARTISTID=76;

--2.5 LIKE FINDS PATTERN IN A STRING 
SELECT*FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN DEFINDS A VALUE BETWEEN PARAMETER A AND B
SELECT*FROM INVOICE WHERE TOTAL BETWEEN 15 AND 20;
--2.6 SAME AS ABOVE
SELECT*FROM EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

--2.7 DELETE, HERE WE REMOVE THE FOREIGN KEY CONSTRAINT IN THE INVOICE TABLE 
--AS LONG AS THE REFERENCE EXITS, WE CANNOT DELTE THE ENTRY
ALTER TABLE INVOICE DROP CONSTRAINT FK_InvoiceCustomerId;
DELETE FROM CUSTOMER WHERE LASTNAME='WALTER' AND FIRSTNAME='ROBERT';

--3.1 GETS CURRENT DATE
SELECT SYSDATE FROM DUAL;

--3.1 GETS THE LENGTH OF THE NAME FROM THE FROM THE MEDIATYPE TABLE
CREATE OR REPLACE FUNCTION CHARLENGTH(IDENT IN MEDIATYPE.MEDIATYPEID%TYPE)
RETURN NUMBER IS NAMELENGTH NUMBER;
BEGIN
SELECT LENGTH(NAME) INTO NAMELENGTH FROM MEDIATYPE
WHERE MEDIATYPEID = IDENT;
RETURN NAMELENGTH;
END;
/
-- CALL THE FUNCTION ABOVE
SELECT CHARLENGTH(4) FROM DUAL;

--3.2 CALCULATES AND RETURNS THE AVERAGE OF THE TOTALS IN INVOICETOTAL TABLE
CREATE OR REPLACE FUNCTION INVOICEAVG
RETURN NUMBER IS AVERAGE NUMBER;
BEGIN
SELECT AVG(TOTAL) INTO AVERAGE FROM INVOICE;
RETURN AVERAGE;
END;
/
-- CALL THE FUNCTION ABOVE
SELECT INVOICEAVG() FROM DUAL;

--3.2 CALCULATE AND RETURN THE MOST EXPENSIVE TRACK
CREATE OR REPLACE FUNCTION MAXPRICETRACK
RETURN NUMBER IS MAXPRICE NUMBER;
BEGIN
SELECT MAX(UNITPRICE) INTO MAXPRICE FROM TRACK;
RETURN MAXPRICE;
END;
/
-- CALL THE FUNCTION ABOVE
SELECT MAXPRICETRACK() FROM DUAL;

--3.3  CALCULATE AND RETURN THE AVERAGE 
CREATE OR REPLACE FUNCTION INVOICELINEAVG
RETURN NUMBER IS AVERAGE NUMBER;
BEGIN
SELECT AVG(UNITPRICE) INTO AVERAGE FROM INVOICELINE;
RETURN AVERAGE;
END;
/
-- CALL THE FUNCTION ABOVE
SELECT INVOICELINEAVG() FROM DUAL;
--3.4 PRINTS OUT BIRTHDAYS IN ASCENDING ORDER
CREATE OR REPLACE FUNCTION EMPLOYEEBIRTHDAYS
RETURN NUMBER IS BIRTHDAYS VARCHAR2;
BEGIN
SELECT BIRTHDATE INTO BIRTHDAYS FROM EMPLOYEE ORDER BY ASC;
RETURN BIRTHDAYS;
END;
/
-- CALL THE FUNCTION ABOVE
SELECT EMPLOYEEBIRTHDAYS() FROM DUAL;

--4.1 Print out mployee first and last names
CREATE OR REPLACE PROCEDURE EMPLOYEENAMES
AS
BEGIN 
SELECT FIRSTNAME,LASTNAME FROM EMPLOYEE;
COMMIT;
END;
EXECUTE EMPLOYEENAMES;

--4.2 Update employee info by inserting new first and last names
CREATE OR REPLACE PROCEDURE UPDATEEMPLOYINFO(LASTNAM IN VARCHAR2,FIRSTNAM IN VARCHAR2, EMPID IN NUMBER)
AS
BEGIN 
UPDATE EMPLOYEE SET LASTNAME = LASTNAME, FIRSTNAME = FIRSTNAM WHERE EMPLOYEEID = EMPID;
COMMIT;
END;

EXECUTE UPDATEEMPLOYINFO('CHANGEDFIRST', 'CHANGEDLAST', 1);

--5.2
CREATE OR REPLACE PROCEDURE NEWCUSTOMER(EMPLOYEEID IN NUMBER,
LASTNAME IN VARCHAR2, FIRSTNAME IN VARCHAR2, TITLE IN VARCHAR2, REPORTSTO IN DATE,BIRTHDATE IN DATE,
HIREDATE IN DATE, ADDRESS IN VARCHAR2,CITY IN VARCHAR2,STATE IN VARCHAR, COUNTRY IN VARCHAR,POSTALCODE IN VARCHAR2,
PHONE IN VARCHAR2,FAX IN VARCHAR2, EMAIL IN VARCHAR2)
AS
BEGIN 
INSERT INTO CUSTOMER(EMPLOYEEID,
LASTNAME,
FIRSTNAME,
TITLE,
REPORTSTO,
BIRTHDATE,
HIREDATE,
ADDRESS,
CITY,
STATE,
COUNTRY,
POSTALCODE,
PHONE,
FAX,
EMAIL) VALUES(EMPLOYEEID,
LASTNAME,
FIRSTNAME,
TITLE,
REPORTSTO,
BIRTHDATE,
HIREDATE,
ADDRESS,
CITY,
STATE,
COUNTRY,
POSTALCODE,
PHONE,
FAX,
EMAILS);
COMMIT;
END;

EXECUTE NEWCUSTOMER(1,'CUSTOMER','LASTNAME','TITLE',123455,01/12/2009,12/22/2008,'CITY','STATE','POSTALCODE','PHONE','FAX,''EMAIL');


--6.1 TRIGGER AFTER INSERTING INTO EMPLOYEE
CREATE TRIGGER AFTERINSERTEMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
SELECT MySeq.NEXTVAL INTO:NEW.C_ID FROM DUAL;
END;
--6.2 TRIGGER AFTER UPDATING A RECORD IN EMPLOYEE
CREATE TRIGGER AFTERUPDATEEMPLOYEE
AFTER UPDATE ON EMPLOYEE
FOR EACH ROW
BEGIN
SELECT MySeq.NEXTVAL INTO:NEW.C_ID FROM DUAL;
END;
--6.3 TRIGGER AFTER DELETING A RECORD FROM EMPLOYEE
CREATE TRIGGER AFTERDELTEEMPLOYEE
AFTER DELETE ON EMPLOYEE
FOR EACH ROW
BEGIN
SELECT MySeq.NEXTVAL INTO:NEW.C_ID FROM DUAL;
END;


--7.1 JOINS COMMON FIELDS BETWEEN CUSTOMER AND INVOICE TABLES
SELECT FIRSTNAME,LASTNAME,INVOICEID FROM CUSTOMER INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

--7.2
SELECT CUSTOMERID,FIRSTNAME,LASTNAME,INVOICEID,TOTAL FROM CUSTOMER FULL OUTER JOIN INVOICE;

--7.3
SELECT ARTIST.NAME, ALBUM.TITLE FROM ALBUM RIGHT JOIN ARTIST 
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4
SELECT*FROM ALBUM CROSS JOIN ARTIST ORDER BY ARTIST.NAME;

--7.5
SELECT REPORTSTO FROM EMPLOYEE, EMPLOYEE;
