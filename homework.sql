--2.1 SELECT
--SELECT * FROM EMPLOYEE
--SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
--SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS null;

-- 2.2
--SELECT * FROM ALBUM ORDER BY TITLE DESC;
--SELECT CITY FROM CUSTOMER ORDER BY CITY ASC;

--2.3
/*Task – Insert two new records into Genre table 
Task – Insert two new records into Employee table
Task – Insert two new records into Customer table
*/

--INSERT INTO GENRE (GENREID, NAME)
--VALUES (26, 'Trap');

--INSERT INTO GENRE (GENREID, NAME)
--VALUES (27, 'Death Metal');

--INSERT INTO EMPLOYEE ( EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
--VALUES (9, 'Terrell', 'Elliott', 'Master Chief', 6 , TO_DATE('19-SEP-87', 'DD-MON-RR'), TO_DATE('22-SEP-18', 'DD-MON-RR'), '123 Smash Ave', 'Memphis', 'TN', 'United States', '38453', '901-393-9283', '282-292-0931', 'bigballer@was.com');

--INSERT INTO EMPLOYEE ( EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
--VALUES (10, 'Loper', 'Shannon', 'Slaver', 3 , TO_DATE('23-OCT-73', 'DD-MON-RR'), TO_DATE('10-DEC-18', 'DD-MON-RR'), '123 Nowhere Street', 'Cleveland', 'OH', 'United States', '57432', '605-323-0583', '605-472-0551', 'lilmomma@was.com');

--INSERT INTO  CUSTOMER ( CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
--VALUES (60, 'Ken', 'Olai', 'Time Warner', 'Dayton', 'OH', 'United States', '92832', '273-293-1232', '212-484-8302', 'washers21@yahoo.com', 3 );

--INSERT INTO  CUSTOMER ( CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
--VALUES (61, 'Janice', 'Perkins', 'Time Warner', 'Dayton', 'OH', 'United States', '92832', '273-293-1237', '212-484-8301', 'jdawg19@yahoo.com', 2 );

--2.4 Update

--UPDATE Customer
--SET  FIRSTNAME = 'Robert', LASTNAME = 'Walter'
--WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';
--/
--UPDATE ARTIST
--SET NAME = 'CCR'
--WHERE NAME = 'Creedence Clearwater Revival';

--2.5
--SELECT * FROM INVOICE WHERE billingaddress LIKE 'T%'

--2.6
--SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 30
--SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('01-JUN-03', 'DD-MON-RR') AND TO_DATE('01-MAR-04', 'DD-MON-RR')
--2.7

--CREATED CASADES ON FOREIGN KEYS TO HANDLE CONSTRAINTS


--THIS SHOULD HAVE DELETED EVEVERYTHING, BUT I ACCIDENTLY DELETED THIS ROW.
DELETE FROM INVOICELINE WHERE INVOICEID = 324;


--3.1
SELECT SYSDATE,
       LAST_DAY(SYSDATE) "Last",
       LAST_DAY(SYSDATE) - SYSDATE "Days Left"
  FROM DUAL
  /
 
SELECT LENGTH(NAME) AS LengthOfName
FROM MEDIATYPE;

--3.2
SELECT AVG(TOTAL) "Average"
  FROM INVOICE
  /
  SELECT MAX(UNITPRICE) "Highest"
  FROM TRACK
  /
  --3.3
--CAN SELECT AN ENTRY FROM THE TABLE AND IT WILL GIVE YOU CAN AVERAGE PRICE
 CREATE OR REPLACE FUNCTION AVG_PRICE
(INVOICE_ID IN NUMBER)
RETURN NUMBER AS
TRACK_AVG NUMBER(6);
BEGIN
SELECT AVG(UNITPRICE) INTO track_avg
FROM INVOICELINE
WHERE INVOICEID=INVOICE_ID;
RETURN TRACK_AVG;
END;
/
SELECT AVG_PRICE(204) FROM DUAL;
/

--3.4
 CREATE OR REPLACE FUNCTION BIRTH_DATES
RETURN VARCHAR2 AS
BIRTHER VARCHAR2(20);
BEGIN
SELECT * FROM EMPLOYEE INTO BIRTHER
WHERE BIRTHDATE > TO_DATE('31-DEC-68', 'DD-MON-RR');
RETURN BIRTHER;
END;
/
SELECT BIRTH_DATES FROM DUAL;
--4.1

CREATE OR REPLACE PROCEDURE NAME_SELECT 
AS
c1 SYS_REFCURSOR;
CUST_LAST VARCHAR2(40);
CUST_FIRST VARCHAR2(40);
 BEGIN 
 OPEN C1 FOR
    SELECT LASTNAME,FIRSTNAME INTO cust_last, CUST_FIRST
    FROM EMPLOYEE WHERE EMPLOYEEID < 9;
DBMS_SQL.RETURN_RESULT(c1);
END;

EXEC NAME_SELECT;
/
--4.2
--Storec procedure that takes in two user inputs to change the first and last names in the table
CREATE OR REPLACE PROCEDURE NAME_UPDATER 
(NAME_UPDATE IN VARCHAR2, NAME_UPDATE2 IN VARCHAR2)
AS
 BEGIN 
   UPDATE EMPLOYEE 
   SET FIRSTNAME = NAME_UPDATE, LASTNAME = NAME_UPDATE2
   WHERE EMPLOYEEID = 3;

END;

EXEC NAME_UPDATER('Howard','Allen');
/
--STORED PROCEDURE WHEN YOU INPUT A MANAGER'S NUMBER CODE IT RETURNS THE EMPLOYEES WHO REPORT TO THEM
CREATE OR REPLACE PROCEDURE MAN_FINDER 
(NAME_SERC IN NUMBER)
AS
c1 SYS_REFCURSOR;

 BEGIN 
 OPEN C1 FOR
SELECT  FIRSTNAME, LASTNAME  
    FROM EMPLOYEE 
   WHERE REPORTSTO = NAME_SERC;
DBMS_SQL.RETURN_RESULT(c1);
END;
EXEC MAN_FINDER(2);

--4.3
--STORED PROCEDURE THAT USES THE CUSTOMER ID TO FIND THE NAME OF THEIR COMPANY AND FULL NAME
CREATE OR REPLACE PROCEDURE COM_FIND 
(ID_SERC IN NUMBER)
AS
c1 SYS_REFCURSOR;

 BEGIN 
 OPEN C1 FOR
SELECT  FIRSTNAME, LASTNAME, COMPANY 
    FROM CUSTOMER 
   WHERE CUSTOMERID = ID_SERC;
DBMS_SQL.RETURN_RESULT(c1);
END;
EXEC COM_FIND(5);
/
--****5.0 TRANSACTIONS***--
--ADDS CONSTRAINT TO FK TO CASADE DELETE
ALTER TABLE INVOICELINE
ADD CONSTRAINT fk_deleter 
FOREIGN KEY (INVOICEID) 
REFERENCES INVOICE (INVOICEID) ON DELETE CASCADE; 
--5.1
CREATE OR REPLACE PROCEDURE DELETE_DATA 
(ID_SERC IN NUMBER)
AS
 BEGIN 

DELETE FROM INVOICE WHERE INVOICEID = ID_SERC; 
 

END;
EXEC DELETE_DATA(324);

/
--5.2
CREATE OR REPLACE PROCEDURE CUST_UPDATER 
(NAME_UPDATE IN NUMBER, NAME_UPDATE2 IN VARCHAR2,NAME_UPDATE3 IN VARCHAR2, NAME_UPDATE4 IN VARCHAR2, NAME_UPDATE5 IN VARCHAR2,NAME_UPDATE6 IN VARCHAR2)
AS
 BEGIN 
 INSERT INTO  CUSTOMER ( CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY,PHONE, EMAIL)
VALUES (NAME_UPDATE, NAME_UPDATE2, NAME_UPDATE3, NAME_UPDATE4, NAME_UPDATE5, NAME_UPDATE6);
   

END;
--SHOUTOUT TO RUGRATS IT'S A CLAASIC
EXECUTE CUST_UPDATER(60, 'Tommy', 'Pickles', 'Rugrats', '555-555-5555', 'reptar@nick.com')






---6.0 TRIGGERS


--6.1
CREATE OR REPLACE TRIGGER HAPPY
AFTER INSERT ON EMPLOYEE
FOR EACH ROW 
BEGIN
INSERT INTO EMPLOYEE(EMPLOYEEID) VALUES (1);
DBMS_OUTPUT.PUT_LINE('I got a new insert here');

END;
/
--6.2 

CREATE OR REPLACE TRIGGER TITLE_UPDATE
AFTER UPDATE ON ALBUM
FOR EACH ROW 
BEGIN
UPDATE ALBUM
SET TITLE = 'TONY'
WHERE ALBUMID < 2;
DBMS_OUTPUT.PUT_LINE('I got a new UPDATE here'); 
END;

CREATE OR REPLACE TRIGGER DELETE_FUNC
AFTER DELETE ON CUSTOMER
FOR EACH ROW 
BEGIN
DBMS_OUTPUT.PUT_LINE('I got a new DELETE here'); 
END;

--7.0 JOINS
--7.1 INNER JOIN
SELECT INVOICE.INVOICEID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME FROM CUSTOMER
INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = invoice.CUSTOMERID;

--7.2 OUTER JOIN
SELECT INVOICE.INVOICEID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.TOTAL
FROM INVOICE
FULL OUTER JOIN CUSTOMER ON CUSTOMER.CUSTOMERID = invoice.CUSTOMERID;

--7.3 RIGHT JOIN
SELECT ARTIST.NAME , ALBUM.TITLE
FROM ARTIST RIGHT JOIN ALBUM ON ARTIST.ARTISTID = album.artistid;

--7.4 CROSS JOIN
SELECT ARTIST.NAME, album.title
FROM ARTIST CROSS JOIN ALBUM  ;

--7.5
SELECT A.LASTNAME, A.FIRSTNAME, B.LASTNAME, B.FIRSTNAME, A.REPORTSTO
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.EMPLOYEEID <> B.EMPLOYEEID
AND A.REPORTSTO = B.REPORTSTO
ORDER BY A.REPORTSTO;
