--2.1 SELECT=======================================
--Task – Select all records from the Employee table.
SELECT * FROM EMPLOYEE;
--Task – Select all records from the Employee table where last name is King.
SELECT * FROM EMPLOYEE WHERE LASTNAME='King';
--Task – Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
SELECT * FROM EMPLOYEE WHERE (FIRSTNAME='Andrew' AND REPORTSTO IS NULL);

--2.2 ORDER BY=====================================
--Task – Select all albums in Album table and sort result set in descending order by title.
SELECT TITLE 
FROM ALBUM
ORDER BY TITLE DESC ;
--Task – Select first name from Customer and sort result set in ascending order by city
SELECT FIRSTNAME 
FROM CUSTOMER 
ORDER BY CITY;
--2.3 INSERT INTO===================================
--Task – Insert two new records into Genre table 
INSERT INTO GENRE VALUES (26, 'Indie Folk');
INSERT INTO GENRE VALUES (27, 'Indie Pop');
--Task – Insert two new records into Employee table
INSERT INTO EMPLOYEE VALUES (9, 'Stephen', 'Richard', 'IT Staff', 6, '10-AUG-91','11-FEB-19','Reflections','Tampa','FL','USA','32825','407-535-1989','555-555-5555','r.austionstephe@gmail.com');
INSERT INTO EMPLOYEE VALUES (10, 'Stephen', 'Austin', 'IT Staff', 6, '11-AUG-91','12-FEB-19','Reflections','Tampa','FL','USA','32825','407-555-1989','556-555-5555','r.austinstephe@gmail.com');
--Task – Insert two new records into Customer table
INSERT INTO CUSTOMER VALUES (60, 'Stephen', 'Richard', 'Revature','Reflections','Tampa','FL','USA','32825','407-535-1989','555-555-5555','r.austionstephe@gmail.com',3);
INSERT INTO CUSTOMER VALUES (61, 'Stephen', 'Austin', 'Revature','Reflections','Tampa','FL','USA','32825','407-535-1989','555-555-5555','r.austionstephe@gmail.com',3);
--2.4 UPDATE========================================
--Task – Update Aaron Mitchell in Customer table to Robert Walter
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert',
LASTNAME = 'Walker'
WHERE CUSTOMERID=32;
--Task – Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”	
UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';
--2.5 LIKE==========================================
--Task – Select all invoices with a billing address like “T%” 
SELECT BILLINGADDRESS FROM INVOICE 
WHERE BILLINGADDRESS LIKE 'T%';
--2.6 BETWEEN=======================================
--Task – Select all invoices that have a total between 15 and 50
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15
AND 50;
--Task – Select all employees hired between 1st of June 2003 and 1st of March 2004
SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN 
'01-JUN-03' AND '01-MAR-04';
--2.7 DELETE========================================
--Task – Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them).
ALTER TABLE INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;
ALTER TABLE INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID
FOREIGN KEY (CUSTOMERID)
REFERENCES CUSTOMER (CUSTOMERID)
ON DELETE CASCADE;
ALTER TABLE INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;
ALTER TABLE INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY (INVOICEID)
REFERENCES INVOICE (INVOICEID)
ON DELETE CASCADE;
DELETE FROM CUSTOMER
WHERE (FIRSTNAME='Robert' AND LASTNAME='Walker');
--################ 3.	SQL Functions ######################################################################
--3.1 SYSTEM DEFNED FUNCTIONS========================
--Task – Create a function that returns the current time.
SELECT TO_CHAR(CURRENT_DATE, 'HH:MI:SS') FROM DUAL; 
--Task – create a function that returns the length of name in MEDIATYPE table
SELECT LENGTH( NAME ) FROM MEDIATYPE;
--3.2 System Defined Aggregate Functions=============
--Task – Create a function that returns the average total of all invoices 
SELECT AVG (TOTAL) FROM INVOICE;
--Task – Create a function that returns the most expensive track
SELECT MAX (UNITPRICE) FROM TRACK;
--3.3 User Defined Scalar Functions
--Task – Create a function that returns the average price of invoiceline items in the invoiceline table
CREATE OR REPLACE FUNCTION AVG_INVOICELINE_PRICE 
RETURN NUMBER AS 
AVERAGE NUMBER;
BEGIN
SELECT AVG (UNITPRICE) INTO AVERAGE
FROM INVOICELINE;
RETURN AVERAGE;
END;
/
SELECT AVG_INVOICELINE_PRICE FROM DUAL;
--3.4 User Defined Table Valued Functions============
--Task – Create a function that returns all employees who are born after 1968.
CREATE OR REPLACE FUNCTION RETURN_BORNAFTER
(BIRTHYEAR IN NUMBER)
 RETURN SYS_REFCURSOR
AS  
  L_RC SYS_REFCURSOR;
BEGIN
OPEN L_RC
FOR SELECT A.FIRSTNAME, A.LASTNAME
FROM EMPLOYEE A
WHERE A.BIRTHDATE>'01-Jan-'||BIRTHYEAR;
RETURN L_RC;
END;
/
SELECT RETURN_BORNAFTER(68) FROM DUAL;
--################ 4.0	Stored Procedures ###################################################################
--4.1 Basic Stored Procedure=========================
--Task – Create a stored procedure that selects the first and last names of all the employees.
CREATE OR REPLACE PROCEDURE GET_EMP_NAMES
IS 
FIRSTNAME VARCHAR2(100); 
LASTNAME VARCHAR2(100);
CURSOR EMP_NAME IS SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
BEGIN
    OPEN EMP_NAME;
    LOOP
    FETCH EMP_NAME INTO FIRSTNAME, LASTNAME;
    EXIT WHEN EMP_NAME%notfound;
    DBMS_OUTPUT.PUT_LINE(FIRSTNAME||' '||LASTNAME);
    END LOOP;
    CLOSE EMP_NAME;
END;
/
SET SERVEROUTPUT ON
EXECUTE GET_EMP_NAMES;
--4.2 Stored Procedure Input Parameters==============
--Task – Create a stored procedure that updates the personal information of an employee.
CREATE OR REPLACE PROCEDURE UPDATE_EMP_NAME
(FIRST_NAME IN VARCHAR2, LAST_NAME IN VARCHAR2,EMPID IN NUMBER)
AS
BEGIN
UPDATE EMPLOYEE
SET FIRSTNAME = FIRST_NAME,
LASTNAME = LAST_NAME
WHERE EMPLOYEEID=EMPID;
COMMIT;
END;
EXECUTE UPDATE_EMP_NAME ('Austin', 'Steffan', 10);
--Task – Create a stored procedure that returns the managers of an employee 
CREATE OR REPLACE PROCEDURE RETURN_MANAGER_NAME
(FIRST_NAME IN VARCHAR2, LAST_NAME IN VARCHAR2)
AS
  MFIRST_NAME             EMPLOYEE.FIRSTNAME%type;
  MLAST_NAME             EMPLOYEE.LASTNAME%type;
  
BEGIN
SELECT EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME INTO MFIRST_NAME,MLAST_NAME
FROM EMPLOYEE
WHERE EMPLOYEEID = (SELECT REPORTSTO FROM EMPLOYEE WHERE (FIRSTNAME=FIRST_NAME AND LASTNAME=LAST_NAME));
DBMS_OUTPUT.PUT_LINE('Manager Name: '||MFIRST_NAME||' '||MLAST_NAME);
END;
/
EXECUTE RETURN_MANAGER_NAME('Austin', 'Steffan');
--4.3 Stored Procedure Output Parameters===============
--Task – Create a stored procedure that returns the name and company of a customer.
CREATE OR REPLACE PROCEDURE RETURN_NAME_COMPANY
(CUSTID IN NUMBER)
AS 
CFIRST_NAME             CUSTOMER.FIRSTNAME%type;
CLAST_NAME             CUSTOMER.LASTNAME%type;
C_COMPANY             CUSTOMER.COMPANY%type;
BEGIN
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, CUSTOMER.COMPANY INTO CFIRST_NAME, CLAST_NAME,C_COMPANY
FROM CUSTOMER
WHERE CUSTOMERID = CUSTID;
DBMS_OUTPUT.PUT_LINE('Customer Name: '||CFIRST_NAME||' '||CLAST_NAME||', Company: '||C_COMPANY);
END;
/
EXECUTE RETURN_NAME_COMPANY(17);
--################## 5.0 Transactions#################################################
--Task – Create a transaction that given a invoiceId will delete that invoice (There may be constraints that rely on this, find out how to resolve them).
CREATE OR REPLACE PROCEDURE DELETE_INVOICE
(INVOICE_ID IN NUMBER)
AS
BEGIN
EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID';
EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY (INVOICEID)
REFERENCES INVOICE (INVOICEID)
ON DELETE CASCADE';
DELETE FROM INVOICE
WHERE INVOICEID = INVOICE_ID;
COMMIT;
END;
/
EXECUTE DELETE_INVOICE (180);
--Task – Create a transaction nested within a stored procedure that inserts a new record in the Customer table
CREATE SEQUENCE CUSTSEQ2
MINVALUE 1
MAXVALUE 10000
START WITH 62
INCREMENT BY 1
CACHE 20;
CREATE OR REPLACE PROCEDURE NEW_CUSTOMER_RECORD
(LAST_NAME IN VARCHAR2, FIRST_NAME IN VARCHAR2, COMPANYNAME IN VARCHAR2,ADDR IN VARCHAR2,CITY IN VARCHAR2,
ADDSTATE IN VARCHAR2,COUNTRY IN VARCHAR2,ZIP_CODE IN NUMBER,PHONE_NO IN VARCHAR2,
FAX_NO IN VARCHAR2,E_MAIL IN VARCHAR2,SUPPORT_REP IN NUMBER)
AS
BEGIN
INSERT INTO CUSTOMER VALUES
(CUSTSEQ2.NEXTVAL, FIRST_NAME, LAST_NAME, COMPANYNAME,ADDR,CITY,
ADDSTATE,COUNTRY,ZIP_CODE,PHONE_NO,
FAX_NO,E_MAIL,SUPPORT_REP);
COMMIT;
END;
/
EXECUTE NEW_CUSTOMER_RECORD ('Eddie','Van Halen','VAN HALEN', '1984 Panama Lane', 'Cleveland','OH','USA',90210,'555-555-5150','555-555-1984','EddieVanHalen@eruption.com',2);
--################### 6.0 Triggers ###########################
--6.1 AFTER/FOR =======================================
--Task - Create an after insert trigger on the employee table fired after a new record is inserted into the table.
CREATE TRIGGER TRIG_AFTER_EMP_RECORD
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('RECORD INSERTED');
END;
--Task – Create an after update trigger on the album table that fires after a row is inserted in the table
CREATE TRIGGER TRIG_AFTER_ALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('ROW INSERTED');
END;
--Task – Create an after delete trigger on the customer table that fires after a row is deleted from the table.
CREATE TRIGGER TRIG_AFTER_DELETE_CUST
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('ROW DELETED');
END;
--################### 7.0 JOINS #######################################################
--7.1 INNER============================================
--Task – Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
SELECT CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM CUSTOMER
INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID=INVOICE.CUSTOMERID;
--7.2 OUTER============================================
--Task – Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
SELECT CUSTOMER.CUSTOMERID,CUSTOMER.FIRSTNAME,CUSTOMER.LASTNAME, INVOICE.INVOICEID,INVOICE.TOTAL
FROM CUSTOMER
LEFT OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID=INVOICE.CUSTOMERID;
--7.3 RIGHT============================================
--Task – Create a right join that joins album and artist specifying artist name and title.
SELECT ARTIST.NAME,ALBUM.TITLE
FROM ARTIST
RIGHT OUTER JOIN ALBUM
ON ARTIST.ARTISTID=ALBUM.ARTISTID;
--7.4 CROSS
--Task – Create a cross join that joins album and artist and sorts by artist name in ascending order.
SELECT album.title, ARTIST.NAME
FROM ALBUM
CROSS JOIN ARTIST;
--7.5 SELF
--Task – Perform a self-join on the employee table, joining on the reportsto column.
SELECT E1.LASTNAME||' reports to '||E2.LASTNAME
FROM EMPLOYEE E1, EMPLOYEE E2
WHERE E1.REPORTSTO = E2.EMPLOYEEID;




