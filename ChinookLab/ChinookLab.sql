-- 2.1 SELECT ------------------------------------------------------------------
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE
WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

-- 2.2 ORDER BY ----------------------------------------------------------------
SELECT * FROM ALBUM
ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER
ORDER BY CITY ASC;

-- 2.3 INSERT INTO -------------------------------------------------------------
INSERT INTO GENRE(GENREID, NAME)
VALUES(26, 'House');

INSERT INTO GENRE(GENREID, NAME)
VALUES(27, 'Drum-and-Bass');

INSERT INTO EMPLOYEE
VALUES(9, 'Smith', 'John', 'IT Staff', 6, '08-MAR-87', '20-AUG-04', 
'284 Main St', 'Edmonton', 'AB', 'Canada', 'T5K 2N1', '+1 (780) 382-3842', 
'+1 (780) 382-3892', 'smithj@chinookcorp.com');

INSERT INTO EMPLOYEE
VALUES(10, 'Johnson', 'Frank', 'IT Staff', 6, '10-JUL-89', '20-JUN-04', 
'837 West St', 'Edmonton', 'AB', 'Canada', 'T5K 2N1', '+1 (780) 382-3342', 
'+1 (780) 382-3332', 'johnsonf@chinookcorp.com');

INSERT INTO CUSTOMER
VALUES(60, 'Smith', 'John', NULL, '284 Main St', 'Edmonton', 'Alberta', 
'Canada', 'T5K 2N1', '+1 (780) 382-3842', NULL, 'smithj@chinookcorp.com', 5);

INSERT INTO CUSTOMER
VALUES(61, 'Johnson', 'Frank', NULL, '837 West St', 'Edmonton', 'Alberta', 
'Canada', 'T5K 2N1', '+1 (780) 382-3342', NULL, 'johnsonf@chinookcorp.com', 5);

-- 2.4 UPDATE ------------------------------------------------------------------
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

-- 2.5 LIKE --------------------------------------------------------------------
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

-- 2.6 BETWEEN -----------------------------------------------------------------
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-2003' AND '01-MAR-2004';

-- 2.7 DELETE ------------------------------------------------------------------
DELETE FROM INVOICELINE -- REMOVE INVOICES IN INVOICELINE
WHERE INVOICEID IN (
    SELECT INVOICEID FROM INVOICE
    WHERE CUSTOMERID = (
        SELECT CUSTOMERID FROM CUSTOMER
        WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter'
    )
);

DELETE FROM INVOICE     -- REMOVE CUSTOMER IN INVOICE
WHERE CUSTOMERID IN (
    SELECT CUSTOMERID FROM CUSTOMER
    WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter'
);

DELETE FROM CUSTOMER    -- REMOVE CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

-- 3.1 SYSTEM DEFINED FUNCTIONS ------------------------------------------------
CREATE OR REPLACE FUNCTION GET_TIME
RETURN TIMESTAMP IS
T TIMESTAMP;
BEGIN
    T := SYSDATE;
    RETURN(T);
END;
/
SELECT GET_TIME() FROM DUAL;

CREATE OR REPLACE FUNCTION GET_NAME_LENGTH(IDENT IN NUMBER)
RETURN NUMBER IS
L NUMBER;
BEGIN
    SELECT LENGTH(NAME) INTO L FROM MEDIATYPE WHERE MEDIATYPEID = IDENT;
    RETURN(L);
END;
/
SELECT GET_NAME_LENGTH(1) FROM DUAL;

-- 3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS --------------------------------------
CREATE OR REPLACE FUNCTION GET_AVERAGE_INVOICE_TOTAL
RETURN NUMBER IS
TOTALAVG NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO TOTALAVG FROM INVOICE;
    RETURN(TOTALAVG);
END;
/
SELECT GET_AVERAGE_INVOICE_TOTAL() FROM DUAL;

CREATE OR REPLACE FUNCTION MOST_EXPENSIVE_TRACK
RETURN NUMBER IS
MAXTRACK NUMBER;
BEGIN
    SELECT MAX(UNITPRICE) INTO MAXTRACK FROM TRACK;
    RETURN(MAXTRACK);
END;
/
SELECT MOST_EXPENSIVE_TRACK() FROM DUAL;

-- 3.3 USER-DEFINED SCALAR FUNCTIONS -------------------------------------------
CREATE OR REPLACE FUNCTION AVG_INVOICELINE_PRICE
RETURN NUMBER IS
AVGPRICE NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO AVGPRICE FROM INVOICELINE;
    RETURN(AVGPRICE);
END;
/
SELECT AVG_INVOICELINE_PRICE() FROM DUAL;

-- 3.4 USER-DEFINED TABLE VALUED FUNCTIONS -------------------------------------
CREATE OR REPLACE FUNCTION EMPLOYEES_AFTER_1968
RETURN NUMBER IS
EMPLID NUMBER;
BEGIN
    SELECT EMPLOYEEID INTO EMPLID FROM EMPLOYEE
    WHERE BIRTHDATE > '01-JAN-1968';
    RETURN EMPLID;
END;
/
SELECT EMPLOYEES_AFTER_1968() FROM DUAL;

-- 4.1 BASIC STORED PROCEDURE --------------------------------------------------
CREATE OR REPLACE PROCEDURE GET_NAMES
AS CURSOR S IS 
SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;

BEGIN
    GET_NAMES(S);
    LOOP
        FETCH S INTO FIRST_NAME, LAST_NAME;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FIRST_NAME || ' ' || LAST_NAME);
    END LOOP;
    CLOSE S;
END;
/
EXECUTE GET_NAMES();